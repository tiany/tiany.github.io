<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸空</title>
  
  <subtitle>天逸的技术随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://t.tiany.me/"/>
  <updated>2018-11-12T12:34:29.549Z</updated>
  <id>http://t.tiany.me/</id>
  
  <author>
    <name>Tiany Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>响应式布局</title>
    <link href="http://t.tiany.me/2016/05/15/rwd/"/>
    <id>http://t.tiany.me/2016/05/15/rwd/</id>
    <published>2016-05-15T23:42:00.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一些 RWD 的东西，本月就偷个懒，用这篇整理的 RWD 的东西来发一篇 blog 吧，总算不用等到月末再发了 , 由于内容主要是看到的一些东西一些摘要，所以上下文并不是很丰富，权做纪念吧。:-)</p><p>响应式布局是为了让一套布局方案能够适应多种多样的显示需求而出现的，解决了传统方案下需要针对不同的设备而专门撰写不同的站点的问题。</p><p>流式布局的关键技术主要有以下几点：</p><ul><li><p>viewport</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  上面的 <code>width=device-width</code> 可以让页面宽度随着设备而改变，这样才可以进行依据宽度的布局，<code>initial-scale=1</code> 则是为了优化用户体验，在屏幕比较小的设备上，像素密度会比普通的显示器大很多，为了显示效果，这些设备一般会把字体等缩放到一个设备无关的大小 (device-independent pixels)，设置这个参数可以让 css 文件中的 px 和 device-independent pixels 对应上。</p><p>  基本上主流的浏览器都支持，对于 IE &lt; IE9 的可以使用如下的 js 来解决 :</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">    &lt;script src=<span class="string">"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></li><li><p>fluid layout<br>  流式布局主要基于 css 的 float 属性来实现，主要的设计形式如下：</p><ul><li>Mostly fluid<br><img src="http://ww4.sinaimg.cn/large/4d1782b1gw1f3g2w0qdbej20dw0a3wem.jpg" alt="Mostly fluid"><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns/mostly-fluid?hl=en" target="_blank" rel="noopener">示例代码</a></li><li>Column drop<br><img src="http://ww3.sinaimg.cn/large/4d1782b1gw1f3g2ytwrqsj20dw0a374f.jpg" alt="Column drop"><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns/column-drop?hl=en" target="_blank" rel="noopener">示例代码</a></li><li>Layout shifter<br><img src="http://ww4.sinaimg.cn/large/4d1782b1gw1f3g31mblxij20dw06tdfx.jpg" alt="Layout shifter"><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns/layout-shifter?hl=en" target="_blank" rel="noopener">示例代码</a></li><li>Tiny tweaks<br><img src="http://ww2.sinaimg.cn/large/4d1782b1gw1f3g3738whdj20dw03ut8o.jpg" alt="Tiny tweaks"><br>这个里面主要是对字体等等做一些微调，布局上没有大的变化。<br><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns/tiny-tweaks?hl=en" target="_blank" rel="noopener">示例代码</a></li><li>Off canvas<br><img src="http://ww2.sinaimg.cn/large/4d1782b1gw1f3g392bhwmj20dw081wem.jpg" alt="Off canvas"><br><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/patterns/off-canvas?hl=en" target="_blank" rel="noopener">示例代码</a></li></ul></li><li><p>media-query</p><ul><li><p>css3 引入的新心功能，可以根据屏幕的宽度加载不同的 css 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 400px 宽度下加载此 css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">　　<span class="attr">media</span>=<span class="string">"screen and (max-device-width: 400px)"</span></span></span><br><span class="line"><span class="tag">　　<span class="attr">href</span>=<span class="string">"tinyScreen.css"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 400-600px 加载此 css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">　　<span class="attr">media</span>=<span class="string">"screen and (min-width: 400px) and (max-device-width: 600px)"</span></span></span><br><span class="line"><span class="tag">　　<span class="attr">href</span>=<span class="string">"smallScreen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css 中引入其他的 css 文件 */</span></span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">"tinyScreen.css"</span>) screen and (max-device-width: <span class="number">400px</span>);</span><br></pre></td></tr></table></figure></li><li><p>@media</p><p>也可以在 css 中直接使用 @media 规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 如下指定了一组在屏幕宽度小于 400 时的队则 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.column</span> &#123;</span><br><span class="line">        <span class="attribute">float</span>: none;</span><br><span class="line">        <span class="attribute">width</span>:auto;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>:none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>misc：</p><ul><li>使用相对宽度</li><li>使用相对大小字体，em，rem，etc.</li><li>mobile first，优先设置移动页面，再一步步扩展为桌面版本，这个可以让你的布局更加灵活，而反过来的时候很多更改都会变得很麻烦。</li></ul></li></ul><p>最后，css 控制前端的布局确实是很辛苦的一件事情，不过做了一段时间之后就会稍微有点感觉了，另外，<a href="http://flexboxin5.com/" target="_blank" rel="noopener">flex-box</a> 是个很好的东西，解决了很多 css 布局的问题，强烈推荐了解，上面的示例代码里面，很多也都用到了。最近还在看一本响应式布局的书，后面如果有新的收获，应该还会再更新的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了一些 RWD 的东西，本月就偷个懒，用这篇整理的 RWD 的东西来发一篇 blog 吧，总算不用等到月末再发了 , 由于内容主要是看到的一些东西一些摘要，所以上下文并不是很丰富，权做纪念吧。:-)&lt;/p&gt;
&lt;p&gt;响应式布局是为了让一套布局方案能够适应多种多样的显示需
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="frontend" scheme="http://t.tiany.me/tags/frontend/"/>
    
      <category term="rwd" scheme="http://t.tiany.me/tags/rwd/"/>
    
  </entry>
  
  <entry>
    <title>Django 中的静态文件处理</title>
    <link href="http://t.tiany.me/2016/04/30/django-static-files/"/>
    <id>http://t.tiany.me/2016/04/30/django-static-files/</id>
    <published>2016-04-30T20:24:00.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始使用 Django 的时候，为了弄清楚其中关于静态文件处理的相关知识，走了不少的弯路，文档也看了好几遍，所以打算在这儿简单记录一下，防止自己将来忘记，也希望可以帮到别人。</p><p>我们将利用 Django 的开发分为三个阶段，在不太的阶段，Django 对静态文件的处理是不太一样的：</p><ol><li><p>初始开发阶段<br> &emsp;&emsp; 在这个阶段，我们基本上就是直接使用 Django 进行开发，要查看结果的时候也就是通过 <code>python manage.py runserver</code> 来直接查看的，如果你所有的静态资源文件都是放在自己的各个应用下面的，那么没有问题 ( 注意需要将你的 app 增加到 <code>INSTALLED_APPS</code> 里），但是如果你有公共的静态资源，放在其他目录下的，就需要关注一个 settings.py 中可以指定的参数 <code>STATICFILES_DIRS</code>, 在它里面增加自己的自定义文件夹，这样跑起来的时候系统就会去找了。比如我们在工程的根目录有一个 static 目录里面放了大家共用的静态资源文件，我们就可以这样定义 <code>STATICFILES_DIRS</code>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>搭配 uwsgi，nginx 的调试阶段<br> &emsp;&emsp; 这一步我们假设已经部署好了 uwsgi，nginx，但是暂时还不想完全把静态文件提出来让 nginx 管理。由于这一步的时候我们的 python 环境已经是由 uwsgi 提供的了，而不是 <code>python manage.py runserver</code>, 所以我们需要在 <code>urls.py</code> 中增加如下配置，来保证 Django 会帮我们渲染静态文件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> staticfiles_urlpatterns</span><br><span class="line"><span class="comment"># ... the rest of your URLconf here ...</span></span><br><span class="line">urlpatterns += staticfiles_urlpatterns()</span><br></pre></td></tr></table></figure><p> &emsp;&emsp; 值得注意的是，这个方法渲染效率其实是很低的，而且是不安全的，所以请务必之在调试环境下使用，第一步里面的 <code>python manage.py runserver</code> 其实也是用了这个方法，而且此方法也旨在 <code>DEBUG=True</code> 的时候才生效。</p></li><li>搭配 uwsgi，nginx 的生产阶段<br> &emsp;&emsp; 在生产阶段，需要保证静态文件的渲染足够快，所以一定不会用上面的方法了，这个时候我们需要把专业的事情交给专业的人来做，也就是把他们都交给 nginx 和 apache 这样的 web_server 来做。<br> &emsp;&emsp; 在交给这样的 nginx，apache 这样的 web_server 之前，我们需要把自己所有的静态文件都集中到一个地方，这样才能方便 nginx，apache 这些服务来处理，需要使用 Django 提供的 <code>python manage.py collectstatic</code> 命令，在使用这个命令之前需要在 settings.py 中指定 MEDIA_ROOT 的值，也就是最终把所有的静态文件收集到什么目录，然后在 nginx 中，再将静态 url 都指定到这个目录就好了。<br> &emsp;&emsp; 考虑到网站加速，我们有时候会使用 oss 或者 cdn 之类的服务，在使用这些服务的时候我们需要将上一步中我们通过 collectstatic 收集起来的文件上传到 oss 或者 cdn 上面，然后在 <code>settings.py</code> 中指定 <code>STATIC_URL</code> 为指定的访问前缀即可。<br> &emsp;&emsp; 另外，推荐下 ManifestStaticFilesStorage，这个 Storage 在 collectstatic 的时候会将所有的文件都算一个 hash 作为文件后缀，这样再上传到 cdn，oss 上面的时候就可以设置缓存的时间为永久了，因为一旦更新的话，对应的 hash 就会发生变化了。详细的情况看<a href="https://docs.djangoproject.com/en/1.9/ref/contrib/staticfiles/#manifeststaticfilesstorage" target="_blank" rel="noopener">这里</a></li></ol><p>另外本文没有提到的一点，就是在 template 的 html 里面引用 static 文件的时候一定要使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static <span class="keyword">from</span> staticfiles %&#125;</span><br><span class="line">&lt;img src=<span class="string">"&#123;% static "</span>images/hi.jpg<span class="string">" %&#125;"</span> alt=<span class="string">"Hi!"</span> /&gt;</span><br></pre></td></tr></table></figure><p>这样的形式，才能保证你的项目尽可能灵活。 但是这个会造成前端无法单独开发，建议构建一个虚拟环境，会接受 templates 的文件名，然后渲染对应的 template，然后经 template 和 static 目录共享给前端的开发人员，这样他们就可以比较容易地开发了。</p><p><em>这个月又是在最后的时间赶文涨，说不仓促是骗人的，下个月一定要努力，希望不用这样赶文章了。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚开始使用 Django 的时候，为了弄清楚其中关于静态文件处理的相关知识，走了不少的弯路，文档也看了好几遍，所以打算在这儿简单记录一下，防止自己将来忘记，也希望可以帮到别人。&lt;/p&gt;
&lt;p&gt;我们将利用 Django 的开发分为三个阶段，在不太的阶段，Django 对静态文
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="Django" scheme="http://t.tiany.me/tags/Django/"/>
    
      <category term="static_files" scheme="http://t.tiany.me/tags/static-files/"/>
    
  </entry>
  
  <entry>
    <title>Django中many-to-many数据库关系的migrate操作</title>
    <link href="http://t.tiany.me/2016/03/29/django-many-to-many-migrate/"/>
    <id>http://t.tiany.me/2016/03/29/django-many-to-many-migrate/</id>
    <published>2016-03-29T01:49:38.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>公司的项目是用 Django 作为基础架构搭建的，在设计数据库的时候由于我当时对 Django 的一些细节还不是很清楚，导致在设计一组多对多的关系的时候直接使用了系统自带的 many_to_many 关系，之后随着需求的增加和代码的进一步开发，发现在这个多对多的关系上需要增加附属信息，而直接使用系统自带的 many_to_many 是无法完成这一需求的。</p><p>举个例子来说就是这样的：<br>假设我们现在有两份数据，分别是 <strong>乐队</strong> 和 <strong>歌手</strong>，显然乐队和歌手之间应该是一个多对多的关系（一个乐队有多个歌手是显而易见的，而随着时间的推演，一个歌手曾经隶属于多个乐队也是很正常的事情），当我们使用默认的 Django 的多对多关系的时候，我们是可以很容易地表述这一信息的。</p><p>之后随着需求的发展，问题变成了这个样子，我们现在还需要记录每个歌手 <strong>加入乐队的时间</strong> 和 <strong>从乐队离队的时间</strong>。首先从直觉上我们会意识到这个其实是对乐队和歌手关系的一个补充描述，所以最合理的添加地方就是在描述乐队和乐手关系的表里面。在这儿我们需要插播一下数据库中是如何实现多对多关系的：</p><ul><li>对于最简单的一对一关系，只需要在一对一关系的任意一方的表里面添加一列，内容为另外一方的 ID 即可实现。</li><li>对于一对多的关系，我们只需要在多的一方的表里面添加一列，内容以一的一方的 ID 也就可以实现了。</li><li>对于多对多的关系，如果我们还是使用上面的两个方法的话，由于我们不知道另外一端到底会有多少个，这样就无法简单通过扩展表的形式来实现了，而且就算实现了，在数据上也是很大的冗余。所以在面对多对多的关系的时候，数据库采用的方法是在新建一张表，这张表里面有两列，分别指向多对对关系里面的双方，这样问题就解决了。</li></ul><p>知道了多对多关系是怎么实现的，然后就是迁移的事情了，Django 其实是提供了自动以这张表的能力的，只需要在创建多对多关系的时候指定它们的 through 就好了，这样后续也可以继续扩展这张表提供更多的附加数据，但是默认的情况下直接建立了一张表，这张表里面只有两列，就是多对多关系的双方。</p><p>如果我们直接新建 through（其实就是 Django 里面的一个 model class），并修改多对多关系的话，直接使用系统的 makemigtations，migrate 我们将会得到一个异常 (Django migration error :you cannot alter to or from M2M fields, or add or remove through= on M2M fields)，所以这样是行不通的。</p><p>这个问题如鲠在喉了好久，Google 上搜到的一些答案也不尽如人意，不过参考那些答案，最终还是把这个问题解决了，基本思路如下：</p><ol><li>保留原有的 many_to_many field，并新建一个 many_to_many field，新建的 many_to_many field 里面指定自定义的 through。</li><li>执行 migrate，使得新建的 many_to_many field 生效。</li><li>执行 data-migration，把旧的 many_to_many field 的数据迁移过来。（这一步可以直接通过写临时脚本来实现，但是由于要考虑 migration 操作的完整性和独立性，所以其实是整个思路里面花时间最长的地方。）</li><li>删除旧的 many_to_many field，并修正新 field 里面的相关命名。</li><li>排查代码，修改用于增加多对多关系的代码。</li></ol><p>代码示例如下：</p><ul><li><p>在执行步骤 1 之前，我们有两个对象 Publication2 和 Article2，它们之间是多对多的关系，并且是直接使用 Django 默认的 many_to_many 来处理的，代码如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publication2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    headline = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    publications = models.ManyToManyField(Publication2)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.headline</span><br></pre></td></tr></table></figure></li><li><p>然后修改 models.py 文件到下面这样，我们增加了 publications_m 用来做中间的中转 field，注意这里添加 related_name 是为了和上面的 publications 区分，否则的话从 Publication2 找 Article2 的时候就无法区分是 publications 关系的还是 publications_m 关系的了，Django 也会报错。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publication2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'title'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    headline = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    publications = models.ManyToManyField(Publication2)</span><br><span class="line">    publications_m = models.ManyToManyField(Publication2, related_name=<span class="string">"ariticle2_m"</span>, through=<span class="string">'WriteRelation2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.headline</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriteRelation2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    publication2 = models.ForeignKey(Publication2, on_delete=models.CASCADE)</span><br><span class="line">    article2 = models.ForeignKey(Article2, on_delete=models.CASCADE)</span><br><span class="line">    write_date = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>执行  <code>./manage.py makemigrations m2m3</code> 和 <code>./manage.py migrate</code>, 其中 m2m3 是我为这个工程取的名字（第三个 m2m 测试），执行后上面 models.py 中的修改就会生效了，生成的 migrate file 内容如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0002_****.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'m2m3'</span>, <span class="string">'0001_initial'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.CreateModel(</span><br><span class="line">            name=<span class="string">'WriteRelation2'</span>,</span><br><span class="line">            fields=[</span><br><span class="line">                (<span class="string">'id'</span>, models.AutoField(serialize=<span class="keyword">False</span>, primary_key=<span class="keyword">True</span>, verbose_name=<span class="string">'ID'</span>, auto_created=<span class="keyword">True</span>)),</span><br><span class="line">                (<span class="string">'write_date'</span>, models.DateTimeField(auto_now_add=<span class="keyword">True</span>)),</span><br><span class="line">                (<span class="string">'article2'</span>, models.ForeignKey(to=<span class="string">'m2m3.Article2'</span>)),</span><br><span class="line">                (<span class="string">'publication2'</span>, models.ForeignKey(to=<span class="string">'m2m3.Publication2'</span>)),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">        migrations.AddField(</span><br><span class="line">            model_name=<span class="string">'article2'</span>,</span><br><span class="line">            name=<span class="string">'publications_m'</span>,</span><br><span class="line">            field=models.ManyToManyField(related_name=<span class="string">'ariticle2_m'</span>, to=<span class="string">'m2m3.Publication2'</span>, through=<span class="string">'m2m3.WriteRelation2'</span>),</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>也是最关键的一步，执行 data migration，具体步骤先执行 <code>./manage.py makemigrations --empty m2m3</code> 这一步会生成一个空的 migrate file 用于填写具体的迁移脚本，填写后再执行 <code>./manage.py migrate</code> 即可完成 data migration，可参考 Django 的<a href="https://docs.djangoproject.com/en/1.9/topics/migrations/#data-migrations" target="_blank" rel="noopener">官方文档</a>。我写的 data migration 的脚本如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0003_****.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forwards_func</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    Article2 = apps.get_model(<span class="string">"m2m3"</span>, <span class="string">"Article2"</span>)</span><br><span class="line">    WriteRelation2 = apps.get_model(<span class="string">"m2m3"</span>, <span class="string">"WriteRelation2"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> Article2.publications.through.objects.all():</span><br><span class="line">        WriteRelation2.objects.create(article2=t.article2, publication2=t.publication2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_func</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    Article2 = apps.get_model(<span class="string">"m2m3"</span>, <span class="string">"Article2"</span>)</span><br><span class="line">    WriteRelation2 = apps.get_model(<span class="string">"m2m3"</span>, <span class="string">"WriteRelation2"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> WriteRelation2.objects.all():</span><br><span class="line">        Article2.publications.through.objects.create(article2=t.article2, publication2=t.publication2)</span><br><span class="line">        t.delete()</span><br><span class="line">        <span class="comment">#WriteRelation2.objects.create(article2=t.article2, publication2=t.publication2)</span></span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'m2m3'</span>, <span class="string">'0002_auto_20160311_0849'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(forwards_func, reverse_func),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>剩下的就是清理工作了，要分两步进行，先删除旧的 many_to_many field， 将新的 many_to_many field 修改名称到原来的样子。完全修改好之后的 models.py 和对应的两个 migrate file 的内容如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  0004_***.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'m2m3'</span>, <span class="string">'0003_auto_20160311_0849'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RemoveField(</span><br><span class="line">            model_name=<span class="string">'article2'</span>,</span><br><span class="line">            name=<span class="string">'publications'</span>,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  0005_***.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'m2m3'</span>, <span class="string">'0004_remove_article2_publications'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RemoveField(</span><br><span class="line">            model_name=<span class="string">'article2'</span>,</span><br><span class="line">            name=<span class="string">'publications_m'</span>,</span><br><span class="line">        ),</span><br><span class="line">        migrations.AddField(</span><br><span class="line">            model_name=<span class="string">'article2'</span>,</span><br><span class="line">            name=<span class="string">'publications'</span>,</span><br><span class="line">            field=models.ManyToManyField(to=<span class="string">'m2m3.Publication2'</span>, through=<span class="string">'m2m3.WriteRelation2'</span>),</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publication2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    headline = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    publications = models.ManyToManyField(Publication2, through=<span class="string">'WriteRelation2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>              <span class="comment"># __unicode__ on Python 2</span></span><br><span class="line">        <span class="keyword">return</span> self.headline</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriteRelation2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    publication2 = models.ForeignKey(Publication2, on_delete=models.CASCADE)</span><br><span class="line">    article2 = models.ForeignKey(Article2, on_delete=models.CASCADE)</span><br><span class="line">    write_date = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>最后就是找到代码里面类似如下的地方：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a1 = Article2.objects.create(headline=<span class="string">'A1'</span>)</span><br><span class="line">p1 = Publication2.objects.create(title=<span class="string">'p1'</span>)</span><br><span class="line">p2 = Publication2.objects.create(title=<span class="string">'p2'</span>)</span><br><span class="line">a1.publications.add(p1)</span><br><span class="line">a1.publications.add(p2)</span><br></pre></td></tr></table></figure><p>  改为</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a1 = Article2.objects.create(headline=<span class="string">'A1'</span>)</span><br><span class="line">p1 = Publication2.objects.create(title=<span class="string">'p1'</span>)</span><br><span class="line">p2 = Publication2.objects.create(title=<span class="string">'p2'</span>)</span><br><span class="line">WriteRelation2.objects.create(article2=a1, publication2=p1)</span><br><span class="line">WriteRelation2.objects.create(article2=a1, publication2=p2)</span><br></pre></td></tr></table></figure></li></ul><p>The End.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司的项目是用 Django 作为基础架构搭建的，在设计数据库的时候由于我当时对 Django 的一些细节还不是很清楚，导致在设计一组多对多的关系的时候直接使用了系统自带的 many_to_many 关系，之后随着需求的增加和代码的进一步开发，发现在这个多对多的关系上需要增
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="Django" scheme="http://t.tiany.me/tags/Django/"/>
    
      <category term="many-to-many" scheme="http://t.tiany.me/tags/many-to-many/"/>
    
      <category term="migrate" scheme="http://t.tiany.me/tags/migrate/"/>
    
  </entry>
  
  <entry>
    <title>RESTfulAPI与Tastypie</title>
    <link href="http://t.tiany.me/2016/02/29/restful-api-and-tastypie/"/>
    <id>http://t.tiany.me/2016/02/29/restful-api-and-tastypie/</id>
    <published>2016-02-29T00:08:38.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>RESTful API 是一个基于 HTTP 定义的通用接口，可以让后台比较容易地数据暴露给前台使用，实在是在现在这个多前台并行开发后端往往支持不力的情况下后端 <del> 偷懒的绝佳法门 </del> 统一接口的一个非常好的方式。</p><p>RESTful API 在不同的语言和框架下都有这自己不同的实现，由于我开发的时候使用了 Python + Django 的组合，而在实现 RESTful API 的时候为了方便起见，我使用了自己之前稍微有过接触的 Tastypie，其实在 Tastypie 之后出现了很多比较优秀的 RESTful api 方案，诸如：<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">django-rest-framework</a> 此处不展开。</p><p>所有的 RESTful API 由于涉及到前后端的数据交互，所以一定要指定一个数据格式，这个格式目前比较主流的就是 json 了，而 TastyPie 相对于其他的实现比较好的一点就是这个从后端数据到 json 的序列化过程可以自动生成，不需要自己去写。</p><p>RESTful API 基本可以分为以下几个部分：</p><ol><li><strong>元</strong><br> 这个部分一般用于查询接口说明，可以从中获取到服务提供的具体接口和调用形式，使用 HTTP 的 GET/OPTION 方法获取。</li><li><strong>增</strong><br> 一般使用 HTTP 的 POST 方法完成，用于向数据源增加数据。</li><li><strong>删</strong><br> 一般使用 HTTP 的 DELETE 方法完成，用于删除已经存在的数据。</li><li><strong>查</strong><br> 一般使用 HTTP 的 GET 方法获取，用于获取数据的具体内容。</li><li><strong>改</strong><br> 一般使用 HTTP 的 PUT/PATCH 方法完成，用于修改已经存在的数据。</li></ol><p>用于前端交互一般都是通过 js 完成的，下面给出一段通过 js 访问相关接口的示例如下：</p><ul><li><p><strong>POST</strong><br>to get the new created object resource_uri, you should specify the CORS_EXPOSE_HEADERS = (‘Location’,) in django-cors-header if this is a cors request.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'address'</span>:<span class="string">'TEST'</span>, <span class="string">'name'</span>:<span class="string">'TEST'</span>&#125;),</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'Location'</span>)); <span class="comment">//resource uri.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>DELETE</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'DELETE'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>GET</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(xhr.responseJSON));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>PUT/PATCH</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'PATCH'</span>,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'build_count'</span>:<span class="number">10</span>&#125;),</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>使用 Tastypie 构建的 RESTful API 需要注意以下点：</p><ul><li>Tastypie 在上传文件方面目前没有比较官方的实现，目前网上给出的方案一般都是 hack 源码的，如果不想 hack 源码的话，可以考虑单独使用普通的 API 来实现，但是一致性会比较差，需要取舍。</li><li>RESTful API 如果是跨域调用的话，需要注意设置跨域请求的参数，可以考虑使用<a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="noopener">django-cors-headers</a></li><li>使用 RESTful API 请务必注意安全，由于此 API 将后台的数据暴露了出去，所以对于调用方身份一定要做严格的校验，避免出现安全问题。</li></ul><p>关于 RESTful API 基本就是这些东西，详细的知识建议翻阅<a href="http://www.restapitutorial.com/" target="_blank" rel="noopener">官方文档</a>，Tastypie 的<a href="https://django-tastypie.readthedocs.org/en/latest/" target="_blank" rel="noopener">官方文档</a> 更要好好翻，我当时因为没有好好翻文档吃了很多亏，谨记，谨记。</p><p><del> 幸好这个月有 29 号，不然真的就要连续两个月断更了，打算三月份多写一篇来弥补下一月份缺的文章，暂定的两篇文章，一篇是 django 的简单开发总结，一篇应该会写一个游戏的求解程序，希望不会跳票。</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RESTful API 是一个基于 HTTP 定义的通用接口，可以让后台比较容易地数据暴露给前台使用，实在是在现在这个多前台并行开发后端往往支持不力的情况下后端 &lt;del&gt; 偷懒的绝佳法门 &lt;/del&gt; 统一接口的一个非常好的方式。&lt;/p&gt;
&lt;p&gt;RESTful API 在
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="RESTful-api" scheme="http://t.tiany.me/tags/RESTful-api/"/>
    
      <category term="Tastypie" scheme="http://t.tiany.me/tags/Tastypie/"/>
    
      <category term="Python" scheme="http://t.tiany.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Vim踩坑一例</title>
    <link href="http://t.tiany.me/2015/12/20/vim-trap/"/>
    <id>http://t.tiany.me/2015/12/20/vim-trap/</id>
    <published>2015-12-20T23:38:41.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>从大学开始使用 Vim 到现在算起来也将近 10 年了，10 年的使用过程里面，除了初期的学习成本之外，vim 基本上没有给我造成过大的麻烦，直到最近的一次。</p><p>事情是这样的，前一段时间我受一些文章的影响 vim 下多文件的编辑从以前习惯的多 tab 方式切换到多 buffer 的模式了，此类的文章如：<a href="https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/" target="_blank" rel="noopener">Vim Tab Madness. Buffers vs Tabs</a>，当然，这并没有问题，因为对多文件的编辑使用 buffer 的形式本身就是 Vim 的设定。多 buffer 下切换 buffer ( 我使用了 minibufferexplorer 插件 ) 的时候是需要先写出下当前 buffer 的 (<code>:w</code>), 这点和在多 tab 编辑下的习惯不太一样，所以我在自己的本地环境也设置了 <code>set hidden</code>, 这样就能避免切换到新的 buffer 的时候就必须写出当前 buffer ，然而比较作死的是，我有一部分代码是直接在服务器上写的，而在服务器的 vimrc 中我并没有设置 <code>set hidden</code>，而且当时也并没有觉得会出什么大问题，直到有一天，我打算完成如下的一个任务：</p><blockquote><p>从 a 文件中分离出来一部分代码到 b 文件中</p></blockquote><p>我当时的的操作流程如下：</p><blockquote><ol><li>新建 b 文件</li><li>vim 同时打开 a，b 文件，用 <code>shift v</code> 选中 a 里需要的代码，按 <code>d</code> 删除（<strong>这里是犯的第一个错误</strong>），<code>:w</code> 保存文件</li><li>跳转到 b 文件，这个时候出了一个小失误，我失手按了 <code>yy</code> 键，复制了某个空行（<strong>这里是第二个错误</strong>），发现在 b 里面无法粘贴原来的代码</li><li>退回到 a 文件，企图用 <code>u</code> 撤销操作失败，<code>:undolist</code> 输出为空…… 这个时候我意识到了问题的存在，保留进程未动，企图恢复文件</li><li>企图通过复制 .swp 文件恢复，复制 .swp 文件到其他目录，然后建立同名文件，打开，按照提示选择恢复，发现已经是 <code>:w</code> 之后的文件了</li><li>企图通过 vim 的自动备份文件来恢复，发现没有备份文件，虽然我以前很讨厌 vim 的备份文件，但是此刻我真的好希望有备份文件，我记得以前备份文件是需要手动关闭的，但是检查了下我的 vimrc 没发现关闭自动备份的地方，感觉像是某个版本后 vim 就默认关闭自动备份了 , 只打开了 writebackup（<strong>这里是第三个错误</strong>）</li><li>本来想在通过文件系统试下找回的，但是想想也就几百行代码，还是直接重写吧，于是作罢。</li></ol></blockquote><p>这个过程的三个简单总结下：</p><blockquote><ol><li>第一个错误，此处应该用复制，待粘贴好之后再执行 delete</li><li>第二个错误，使用的是默认寄存器时，一定要随时小心寄存器被覆盖</li><li>第三个错误，备份任何时候都不是多余的。<br><strong>冗余不做，日子甭过，备份不做，十恶不赦</strong> &emsp;&emsp;&emsp; – 摘自某 Linux 前辈签名</li></ol></blockquote><p>问题发生了，但是我坚信 vim 一定有办法解决这个问题的，于是开始请教了一堆人（这里感叹下，vim 的 freenode irc 真的好冷清），并做了各种尝试，最终结论如下，与君共飨：</p><ol><li><p>首先是造成这个问题的原因</p><blockquote><p>  When unloading a buffer Vim normally destroys the tree of undos created for that buffer.</p></blockquote><p> 以上文字来源于 <code>:help persist-undo</code>，( 多谢 <a href="http://lilydjwg.is-programmer.com/" target="_blank" rel="noopener">百合喵</a>), 也就是默认的 buffer 设置下，<code>:w</code> 然后切换到其他 buffer 的时候，当前 buffer 的 <code>undo tree</code> 就会被销毁了，这也是造成这次事故的根本原因。</p></li><li><p>解决方案，也是最简单的，设置 <code>set hidden</code>， 这个可以保证你切换到其他 buffer 的时候当前的 buffer 只是 hidden 而不是 unload，所以 undo tree 就不会被销毁了，但是使用这个选项的时候一定要特别小心地使用 <code>:q!</code> <code>:qall!</code> 这样的命令，否则容易丢文件</p></li><li><p>设置 persist-undo，详细的设置见 <code>:help persist-undo</code>, 推荐搭配 <a href="https://github.com/mbbill/undotree" target="_blank" rel="noopener">undo-tree</a> 使用 , 参考设置</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F5&gt;</span> :UndotreeToggle<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"persistent_undo"</span>)</span><br><span class="line">    <span class="keyword">set</span> undodir=~/.undodir/</span><br><span class="line">    <span class="keyword">set</span> <span class="built_in">undofile</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></li><li><p>设置 backup，详细设置可以看 <code>:help backup</code>, 参考设置：</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> backupdir=~/.vim_backdir/</span><br><span class="line"><span class="keyword">set</span> backup</span><br></pre></td></tr></table></figure></li></ol><p>如上配置之后基本上就不用担心 vim 丢文件了，当然，配合上好用的版本控制工具，效果就更好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从大学开始使用 Vim 到现在算起来也将近 10 年了，10 年的使用过程里面，除了初期的学习成本之外，vim 基本上没有给我造成过大的麻烦，直到最近的一次。&lt;/p&gt;
&lt;p&gt;事情是这样的，前一段时间我受一些文章的影响 vim 下多文件的编辑从以前习惯的多 tab 方式切换到
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="vim" scheme="http://t.tiany.me/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>hexo-config</title>
    <link href="http://t.tiany.me/2015/12/08/hexo-config/"/>
    <id>http://t.tiany.me/2015/12/08/hexo-config/</id>
    <published>2015-12-08T21:34:25.000Z</published>
    <updated>2018-11-12T12:34:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>想写技术博客的时间其实有很久了，但是一直都没有实施起来过，怎么说呢，拖延症确实还是太严重了，希望这次会是一个好的开始，目前的计划是每月保证一更，希望能坚持下来。</p><p>把技术博客从 wp 迁移到 github pages 了，一个主要的原因是我开始喜欢上 Markdown 这样的写作方式了，另外也是想体验下 github pages 的博客功能。前期在搭建的技术选型中在 jekyll 和 hexo 中犹豫了好久，不过还是更喜欢 hexo 这个名字， 你看，hex 是 16 进制，hexo 和 hero 又只有一字之差，而且读着也蛮朗朗上口的，还有一个私心，是想在用 hexo 的过程中了解下 node.js, 这么多好处就由不得我不去选 hexo 了啊……</p><p>选好了最基础的框架之后，就开始动手了，这方面网上有很多教程，基本上随便找找就可以搞定了，我是参考这两篇完成的：</p><ul><li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">使用 GitHub 和 Hexo 搭建免费静态 Blog</a></li><li><a href="http://jdpaton.github.io/2012/11/05/setup-hexo/" target="_blank" rel="noopener">Setting up a Github Pages blog with Hexo</a></li></ul><p>建立好基础的架构只是第一步，下面需要找到自己心仪主题，否则千篇一律的 blog 总归是很难让人赏心悦目的，主题可以在官方给出的参考里面去找 .<br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题列表</a></p><p>我在万般纠结之后选择了这个主题 : <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a>，总体上还是很满意的，不过后来测试发了篇文章，发现了两个问题：</p><ol><li>不支持数学公式显示</li><li>引用的样式不喜欢</li></ol><p>虽然我可能几百年也用不了一次数学公式显示，而引用的使用机会也不是很高，但是知道了问题的存在而不去解决实在是太让人难受了，于是去翻了下主题的代码，发现用到了 jade 和 sass，这两个都是我之前没有接触过的技术（不得不感叹前端技术日新月异啊）。但是问题还是要解决的，下面简单记录下两个问题的解决过程，希望能帮到有需要的人。</p><ol><li>不支持数学公式显示<ol><li>网上搜索得到的方案是使用 mathjax，在网上找了一段 js 代码研究 jade 的语法终于正确嵌入后，像<a href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/" target="_blank" rel="noopener">这样</a>，发现在显示的时候末尾会有一个小竖线，如前面链接里面显示的，看着非常难受。</li><li>为了解决小竖线的问题，看是看 mathjax 的<a href="https://www.mathjax.org/" target="_blank" rel="noopener">官网</a>，发现虽然他们官网的例子里面是没有小竖线的，但是翻他们官网的页面源码，把 mathjax 的相关配置抄过来之后，发现在我的博客上显示还是有问题，遂放弃。</li><li>后来想到在 Cmd Markdown 和 StackEdit 上面数学公式渲染后都是没有小竖线的，于是从 Cmd Markdown 的页面里面借鉴了相关 mathjax 的配置，问题解决，相关修改可以参考<a href="https://github.com/tiany/maupassant-hexo/commit/fd8319fbf9a5f0936ad3348132e41d5c2d5a8215" target="_blank" rel="noopener">这里</a></li></ol></li><li>引用的样式不喜欢<ol><li>可能是习惯了 markdown 那样的用一条小竖线来表示引用，对于这个主题里面用一个很大的双引号来表示引用实在无法喜欢起来，显示找到源码中关于 blockquote 的相关 css 配置，修改后发现左边会很宽。</li><li>用 chrome 的开发工具调试后发现是由于浏览器自带的 css 属性没有 reset 导致的，后来把相关的属性重写后就好了 (blockquote 的 margin-left 属性，chrome 下默认是 40px），最终的修改参考<a href="https://github.com/tiany/maupassant-hexo/commit/c3453553343a9072425350c1d13bdef1fd2c18ef" target="_blank" rel="noopener">这里</a></li></ol></li></ol><p>两个修改后，这个主题基本符合我的需求了，修改后的效果如下：</p><ul><li><p>数学公式</p><p>$$ E = mc^2 $$</p></li><li><p>引用样式</p><blockquote><p>这是一段引用</p></blockquote></li></ul><p>第一篇博文，就写到这里吧，希望能够坚持下来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想写技术博客的时间其实有很久了，但是一直都没有实施起来过，怎么说呢，拖延症确实还是太严重了，希望这次会是一个好的开始，目前的计划是每月保证一更，希望能坚持下来。&lt;/p&gt;
&lt;p&gt;把技术博客从 wp 迁移到 github pages 了，一个主要的原因是我开始喜欢上 Markd
      
    
    </summary>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
    
      <category term="hexo" scheme="http://t.tiany.me/tags/hexo/"/>
    
      <category term="mathjax" scheme="http://t.tiany.me/tags/mathjax/"/>
    
  </entry>
  
</feed>
