<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[逸空]]></title>
  <subtitle><![CDATA[天逸的技术随笔]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://t.tiany.me/"/>
  <updated>2016-02-28T17:10:42.638Z</updated>
  <id>http://t.tiany.me/</id>
  
  <author>
    <name><![CDATA[Tiany Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[RESTful API 与 Tastypie]]></title>
    <link href="http://t.tiany.me/2016/02/29/restful-api-and-tastypie/"/>
    <id>http://t.tiany.me/2016/02/29/restful-api-and-tastypie/</id>
    <published>2016-02-28T16:08:38.000Z</published>
    <updated>2016-02-28T17:10:42.638Z</updated>
    <content type="html"><![CDATA[<p>RESTful API是一个基于HTTP定义的通用接口，可以让后台比较容易地数据暴露给前台使用，实在是在现在这个多前台并行开发后端往往支持不力的情况下后端<del>偷懒的绝佳法门</del>统一接口的一个非常好的方式。</p>
<p>RESTful API在不同的语言和框架下都有这自己不同的实现，由于我开发的时候使用了Python + Django的组合，而在实现RESTful API的时候为了方便起见，我使用了自己之前稍微有过接触的Tastypie，其实在Tastypie之后出现了很多比较优秀的RESTful api方案，诸如：<a href="http://www.django-rest-framework.org/" target="_blank" rel="external">django-rest-framework</a> 此处不展开。</p>
<p>所有的RESTful API由于涉及到前后端的数据交互，所以一定要指定一个数据格式，这个格式目前比较主流的就是json了，而TastyPie相对于其他的实现比较好的一点就是这个从后端数据到json的序列化过程可以自动生成，不需要自己去写。</p>
<p>RESTful API基本可以分为以下几个部分：</p>
<ol>
<li><strong>元</strong><br> 这个部分一般用于查询接口说明，可以从中获取到服务提供的具体接口和调用形式，使用HTTP的GET/OPTION方法获取。</li>
<li><strong>增</strong><br> 一般使用HTTP的POST方法完成，用于向数据源增加数据。</li>
<li><strong>删</strong><br> 一般使用HTTP的DELETE方法完成，用于删除已经存在的数据。</li>
<li><strong>查</strong><br> 一般使用HTTP的GET方法获取，用于获取数据的具体内容。</li>
<li><strong>改</strong><br> 一般使用HTTP的PUT/PATCH方法完成，用于修改已经存在的数据。</li>
</ol>
<p>用于前端交互一般都是通过js完成的，下面给出一段通过js访问相关接口的示例如下：</p>
<p><strong>POST</strong><br>to get the new created object resource_uri, you should specify the CORS_EXPOSE_HEADERS = (‘Location’,) in django-cors-header if this is a cors request.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'address'</span>:<span class="string">'TEST'</span>, <span class="string">'name'</span>:<span class="string">'TEST'</span>&#125;),</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'Location'</span>)); <span class="comment">//resource uri.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>DELETE</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'DELETE'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>GET</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(xhr.responseJSON));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>PUT/PATCH</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'PATCH'</span>,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">'build_count'</span>:<span class="number">10</span>&#125;),</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用Tastypie构建的RESTful API需要注意以下点：</p>
<ul>
<li>Tastypie在上传文件方面目前没有比较官方的实现，目前网上给出的方案一般都是hack源码的，如果不想hack源码的话，可以考虑单独使用普通的API来实现，但是一致性会比较差，需要取舍。</li>
<li>RESTful API如果是跨域调用的话，需要注意设置跨域请求的参数，可以考虑使用<a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="external">django-cors-headers</a></li>
<li>使用RESTful API请务必注意安全，由于此API将后台的数据暴露了出去，所以对于调用方身份一定要做严格的校验，避免出现安全问题。</li>
</ul>
<p>关于RESTful API基本就是这些东西，详细的知识建议翻阅<a href="http://www.restapitutorial.com/" target="_blank" rel="external">官方文档</a>，Tastypie的<a href="https://django-tastypie.readthedocs.org/en/latest/" target="_blank" rel="external">官方文档</a>更要好好翻，我当时因为没有好好翻文档吃了很多亏，谨记，谨记。</p>
<p><del>幸好这个月有29号，不然真的就要连续两个月断更了，打算三月份多写一篇来弥补下一月份缺的文章，暂定的两篇文章，一篇是django的简单开发总结，一篇应该会写一个游戏的求解程序，希望不会跳票。</del></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>RESTful API是一个基于HTTP定义的通用接口，可以让后台比较容易地数据暴露给前台使用，实在是在现在这个多前台并行开发后端往往支持不力的情况下后端<del>偷懒的绝佳法门</del>统一接口的一个非常好的方式。</p>
<p>RESTful API在不同的语言和框架]]>
    </summary>
    
      <category term="Python" scheme="http://t.tiany.me/tags/Python/"/>
    
      <category term="RESTful-api" scheme="http://t.tiany.me/tags/RESTful-api/"/>
    
      <category term="Tastypie" scheme="http://t.tiany.me/tags/Tastypie/"/>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim踩坑一例]]></title>
    <link href="http://t.tiany.me/2015/12/20/vim-trap/"/>
    <id>http://t.tiany.me/2015/12/20/vim-trap/</id>
    <published>2015-12-20T15:38:41.000Z</published>
    <updated>2015-12-20T16:23:18.521Z</updated>
    <content type="html"><![CDATA[<p>从大学开始使用Vim到现在算起来也将近10年了，10年的使用过程里面，除了初期的学习成本之外，vim基本上没有给我造成过大的麻烦，直到最近的一次。</p>
<p>事情是这样的，前一段时间我受一些文章的影响vim下多文件的编辑从以前习惯的多tab方式切换到多buffer的模式了，此类的文章如：<a href="https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/" target="_blank" rel="external">Vim Tab Madness. Buffers vs Tabs</a>，当然，这并没有问题，因为对多文件的编辑使用buffer的形式本身就是Vim的设定。多buffer下切换buffer(我使用了minibufferexplorer插件)的时候是需要先写出下当前buffer的(<code>:w</code>),这点和在多tab编辑下的习惯不太一样，所以我在自己的本地环境也设置了<code>set hidden</code>, 这样就能避免切换到新的buffer的时候就必须写出当前buffer，然而比较作死的是，我有一部分代码是直接在服务器上写的，而在服务器的vimrc中我并没有设置<code>set hidden</code>，而且当时也并没有觉得会出什么大问题，指导有一天，我打算完成如下的一个任务：</p>
<blockquote>
<p>  从a文件中分离出来一部分代码到b文件中</p>
</blockquote>
<p>我当时的的操作流程如下：</p>
<blockquote>
<ol>
<li>新建b文件</li>
<li>vim同时打开a，b文件，用<code>shift v</code>选中a里需要的代码，按<code>d</code>删除（<strong>这里是犯的第一个错误</strong>），<code>:w</code> 保存文件</li>
<li>跳转到b文件，这个时候出了一个小失误，我失手按了<code>yy</code>键，复制了某个空行（<strong>这里是第二个错误</strong>），发现在b里面无法粘贴原来的代码</li>
<li>退回到a文件，企图用<code>u</code>撤销操作失败，<code>:undolist</code>输出为空…… 这个时候我意识到了问题的存在，保留进程未动，企图恢复文件</li>
<li>企图通过复制.swp文件恢复，复制.swp文件到其他目录，然后建立同名文件，打开，按照提示选择恢复，发现已经是<code>:w</code>之后的文件了</li>
<li>企图通过vim的自动备份文件来恢复，发现没有备份文件，虽然我以前很讨厌vim的备份文件，但是此刻我真的好希望有备份文件，我记得以前备份文件是需要手动关闭的，但是检查了下我的vimrc没发现关闭自动备份的地方，感觉像是某个版本后vim就默认关闭自动备份了,只打开了writebackup（<strong>这里是第三个错误</strong>）</li>
<li>本来想在通过文件系统试下找回的，但是想想也就几百行代码，还是直接重写吧，于是作罢。</li>
</ol>
</blockquote>
<p>这个过程的三个简单总结下：</p>
<blockquote>
<ol>
<li>第一个错误，此处应该用复制，待粘贴好之后再执行delete</li>
<li>第二个错误，使用的是默认寄存器时，一定要随时小心寄存器被覆盖</li>
<li>第三个错误，备份任何时候都不是多余的。<br><strong>冗余不做，日子甭过，备份不做，十恶不赦</strong> &emsp;&emsp;&emsp; –摘自某Linux前辈签名</li>
</ol>
</blockquote>
<p>问题发生了，但是我坚信vim一定有版本解决这个问题的，于是开始请教了一堆人（这里感叹下，vim的freenode irc真的好冷清），并做了各种尝试，最终结论如下，与君共飨：</p>
<ol>
<li><p>首先是造成这个问题的原因</p>
<blockquote>
<p>  When unloading a buffer Vim normally destroys the tree of undos created for that buffer.</p>
</blockquote>
<p> 以上文字来源于<code>:help persist-undo</code>，(多谢 <a href="http://lilydjwg.is-programmer.com/" target="_blank" rel="external">百合喵</a>), 也就是默认的buffer设置下，<code>:w</code>然后切换到其他buffer的时候，当前buffer的<code>undo tree</code>就会被销毁了，这也是造成这次事故的根本原因。</p>
</li>
<li><p>解决方案，也是最简单的，设置<code>set hidden</code>， 这个可以保证你切换到其他buffer的时候当前的buffer只是hidden而不是unload，所以undo tree就不会被销毁了，但是使用这个选项的时候一定要特别小心地使用<code>:q!</code> <code>:qall!</code> 这样的命令，否则容易丢文件</p>
</li>
<li><p>设置persist-undo，详细的设置见<code>:help persist-undo</code>, 推荐搭配 <a href="https://github.com/mbbill/undotree" target="_blank" rel="external">undo-tree</a> 使用, 参考设置</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nnoremap &lt;<span class="constant">F5</span>&gt; <span class="symbol">:UndotreeToggle&lt;cr&gt;</span></span><br><span class="line"> <span class="keyword">if</span> has(<span class="string">"persistent_undo"</span>)</span><br><span class="line">     set undodir=~<span class="regexp">/.undodir/</span></span><br><span class="line">     set undofile</span><br><span class="line"> endif</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置backup，详细设置可以看 <code>:help backup</code>, 参考设置：</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">set</span> backupdir=~/.vim_backdir/</span><br><span class="line"> <span class="keyword">set</span> <span class="keyword">backup</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如上配置之后基本上就不用担心vim丢文件了，当然，配合上好用的版本控制工具，效果就更好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从大学开始使用Vim到现在算起来也将近10年了，10年的使用过程里面，除了初期的学习成本之外，vim基本上没有给我造成过大的麻烦，直到最近的一次。</p>
<p>事情是这样的，前一段时间我受一些文章的影响vim下多文件的编辑从以前习惯的多tab方式切换到多buffer的模式]]>
    </summary>
    
      <category term="vim" scheme="http://t.tiany.me/tags/vim/"/>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo-config]]></title>
    <link href="http://t.tiany.me/2015/12/08/hexo-config/"/>
    <id>http://t.tiany.me/2015/12/08/hexo-config/</id>
    <published>2015-12-08T13:34:25.000Z</published>
    <updated>2015-12-20T16:38:51.694Z</updated>
    <content type="html"><![CDATA[<p>想写技术博客的时间其实有很久了，但是一直都没有实施起来过，怎么说呢，拖延症确实还是太严重了，希望这次会是一个好的开始，目前的计划是每月保证一更，希望能坚持下来。</p>
<p>把技术博客从wp迁移到github pages了，一个主要的原因是我开始喜欢上Markdown这样的写作方式了，另外也是想体验下github pages的博客功能。前期在搭建的技术选型中在jekyll和hexo中犹豫了好久，不过还是更喜欢hexo这个名字， 你看，hex是16进制，hexo和hero又只有一字之差，而且读着也蛮朗朗上口的，还有一个私心，是想在用hexo的过程中了解下node.js, 这么多好处就由不得我不去选hexo了啊……</p>
<p>选好了最基础的框架之后，就开始动手了，这方面网上有很多教程，基本上随便找找就可以搞定了，我是参考这两篇完成的：</p>
<ul>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://jdpaton.github.io/2012/11/05/setup-hexo/" target="_blank" rel="external">Setting up a Github Pages blog with Hexo</a></li>
</ul>
<p>建立好基础的架构只是第一步，下面需要找到自己心仪主题，否则千篇一律的blog总归是很难让人赏心悦目的，主题可以在官方给出的参考里面去找.<br><a href="https://hexo.io/themes/" target="_blank" rel="external">官网主题列表</a></p>
<p>我在万般纠结之后选择了这个主题: <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant-hexo</a>，总体上还是很满意的，不过后来测试发了篇文章，发现了两个问题：</p>
<ol>
<li>不支持数学公式显示</li>
<li>引用的样式不喜欢</li>
</ol>
<p>虽然我可能几百年也用不了一次数学公式显示，而引用的使用机会也不是很高，但是知道了问题的存在而不去解决实在是太让人难受了，于是去翻了下主题的代码，发现用到了jade和sass，这两个都是我之前没有接触过的技术（不得不感叹前端技术日新月异啊）。但是问题还是要解决的，下面简单记录下两个问题的解决过程，希望能帮到有需要的人。</p>
<ol>
<li>不支持数学公式显示<ol>
<li>网上搜索得到的方案是使用mathjax，在网上找了一段js代码研究jade的语法终于正确嵌入后，像<a href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/" target="_blank" rel="external">这样</a>，发现在显示的时候末尾会有一个小竖线，如前面链接里面显示的，看着非常难受。</li>
<li>为了解决小竖线的问题，看是看mathjax的<a href="https://www.mathjax.org/" target="_blank" rel="external">官网</a>，发现虽然他们官网的例子里面是没有小竖线的，但是翻他们官网的页面源码，把mathjax的相关配置抄过来之后，发现在我的博客上显示还是有问题，遂放弃。</li>
<li>后来想到在Cmd Markdown和StackEdit上面数学公式渲染后都是没有小竖线的，于是从Cmd Markdown的页面里面借鉴了相关mathjax的配置，问题解决，相关修改可以参考<a href="https://github.com/tiany/maupassant-hexo/commit/fd8319fbf9a5f0936ad3348132e41d5c2d5a8215" target="_blank" rel="external">这里</a></li>
</ol>
</li>
<li>引用的样式不喜欢<ol>
<li>可能是习惯了markdown那样的用一条小竖线来表示引用，对于这个主题里面用一个很大的双引号来表示引用实在无法喜欢起来，显示找到源码中关于blockquote的相关css配置，修改后发现左边会很宽。</li>
<li>用chrome的开发工具调试后发现是由于浏览器自带的css属性没有reset导致的，后来把相关的属性重写后就好了(blockquote的margin-left属性，chrome下默认是40px），最终的修改参考<a href="https://github.com/tiany/maupassant-hexo/commit/c3453553343a9072425350c1d13bdef1fd2c18ef" target="_blank" rel="external">这里</a></li>
</ol>
</li>
</ol>
<p>两个修改后，这个主题基本符合我的需求了，修改后的效果如下：</p>
<ul>
<li><p>数学公式<br>$$ E = mc^2 $$</p>
</li>
<li><p>引用样式</p>
<blockquote>
<p>这是一段引用</p>
</blockquote>
</li>
</ul>
<p>第一篇博文，就写到这里吧，希望能够坚持下来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>想写技术博客的时间其实有很久了，但是一直都没有实施起来过，怎么说呢，拖延症确实还是太严重了，希望这次会是一个好的开始，目前的计划是每月保证一更，希望能坚持下来。</p>
<p>把技术博客从wp迁移到github pages了，一个主要的原因是我开始喜欢上Markdown这样]]>
    </summary>
    
      <category term="hexo" scheme="http://t.tiany.me/tags/hexo/"/>
    
      <category term="mathjax" scheme="http://t.tiany.me/tags/mathjax/"/>
    
      <category term="tech" scheme="http://t.tiany.me/categories/tech/"/>
    
  </entry>
  
</feed>
